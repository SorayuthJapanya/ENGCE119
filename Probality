{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOU5I3DEnZj6hpD1lO9T4M/",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/SorayuthJapanya/ENGCE119/blob/main/Probality\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7YMu3GgMRtgC",
        "outputId": "2e52b26a-804d-46aa-c418-d7616eb4c5a4"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7872535086053528"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "import numpy as np\n",
        "np.random.rand()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# coin toss\n",
        "for i in range(10) :\n",
        "  r = np.random.rand()\n",
        "  if r > 0.5 :\n",
        "    print('H')\n",
        "  else :\n",
        "    print('T')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zbrtP_5OTtst",
        "outputId": "e3fcf484-3a5c-4d6a-8368-fe7e1d8f5359"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "T\n",
            "H\n",
            "H\n",
            "H\n",
            "H\n",
            "T\n",
            "T\n",
            "T\n",
            "H\n",
            "T\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# coin toss\n",
        "for i in range(10) :\n",
        "  r = np.random.rand()\n",
        "  if r > 2/3 :\n",
        "    print('Banana')\n",
        "  elif r > 1/3 :\n",
        "    print('Apple')\n",
        "  else  :\n",
        "    print('Melon')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XA7VPmXxT3Hj",
        "outputId": "d7d2da44-186a-4a47-eae4-a52745a7d089"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Apple\n",
            "Banana\n",
            "Apple\n",
            "Melon\n",
            "Apple\n",
            "Apple\n",
            "Banana\n",
            "Melon\n",
            "Banana\n",
            "Apple\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import itertools\n",
        "\n",
        "suits = ['heart','spade','diamond','clover']\n",
        "ranks = ['A','2','3','4','5','6','7','8','9','10','J','Q','K']\n",
        "deck = itertools.product(suits, ranks)\n",
        "deck = list(deck)\n",
        "len(deck)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h9vc8HwtW7qF",
        "outputId": "af19211b-7726-49f8-f159-162f71b4e0f6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "52"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "\n",
        "count = 0\n",
        "for i in range(1000) :\n",
        "  random.shuffle(deck)\n",
        "  if deck[0][0] == 'diamond' and deck[1][0] == 'diamond' :\n",
        "    count = count + 1\n",
        "count\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UMsesJA9Zz3S",
        "outputId": "6ae9bc9d-fa1f-4f6f-a8ad-8ea12cefb23f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "42"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from math import factorial\n",
        "\n",
        "def choose(n,r) :\n",
        "  return factorial(n) / (factorial(r) * factorial(n-r))\n",
        "choose(12,2)/choose(67,3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "p75TiSfndyuW",
        "outputId": "2c851fc6-82ea-4939-95e2-740f8a710c88"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.0013777267508610792"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    }
  ]
}